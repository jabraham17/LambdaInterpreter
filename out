{type:var,value:a}
T{type:op,value:=}
{type:var,value:a}
T{type:op,value:<=}
{type:var,value:b}
{
	type: "assign",
	left: {
		type: "var",
		value: "a"
	},
	operator: "=",
	right: {
		type: "binary",
		left: {
			type: "var",
			value: "a"
		},
		operator: "<=",
		right: {
			type: "var",
			value: "b"
		}
	}
}
{type:var,value:b}
T{type:op,value:=}
{type:kw,value:true}
{
	type: "assign",
	left: {
		type: "var",
		value: "b"
	},
	operator: "=",
	right: {
		type: "bool",
		value: "true"
	}
}
{type:var,value:d}
T{type:op,value:=}
{type:kw,value:false}
{
	type: "assign",
	left: {
		type: "var",
		value: "d"
	},
	right: {
		type: "bool",
		value: "false"
	},
	operator: "="
}
{type:var,value:c}
T{type:op,value:=}
{type:var,value:d}
T{type:op,value:-}
{type:num,value:2}
T{type:op,value:*}
{type:num,value:4}
{
	type: "assign",
	right: {
		type: "binary",
		operator: "-",
		right: {
			type: "binary",
			left: {
				type: "num",
				value: "2"
			},
			operator: "*",
			right: {
				type: "num",
				value: "4"
			}
		},
		left: {
			type: "var",
			value: "d"
		}
	},
	operator: "=",
	left: {
		type: "var",
		value: "c"
	}
}
{type:var,value:test}
T{type:op,value:=}
{type:kw,value:lambda}
{type:kw,value:if}
Error1
{type:var,value:x}
T{type:op,value:<}
{type:num,value:2}
{
	type: "binary",
	left: {
		type: "var",
		value: "x"
	},
	operator: "<",
	right: {
		type: "num",
		value: "2"
	}
}
{type:var,value:x}
{
	type: "assign",
	left: {
		type: "var",
		value: "test"
	},
	right: {
		type: "lambda",
		body: {
			type: "if",
			cond: {
				type: "binary",
				left: {
					type: "var",
					value: "x"
				},
				operator: "<",
				right: {
					type: "num",
					value: "2"
				}
			},
			then: {
				type: "var",
				value: "x"
			}
		},
		vars: "x"
	},
	operator: "="
}
{type:var,value:println}
{type:str,value:Hello World}
{
	type: "call",
	func: {
		type: "var",
		value: "println"
	},
	args: {
		type: "str",
		value: "Hello World"
	}
}
{type:var,value:println}
{type:num,value:2}
T{type:op,value:+}
{type:num,value:3}
T{type:op,value:*}
{type:num,value:4}
{
	type: "call",
	args: {
		type: "binary",
		left: {
			type: "num",
			value: "2"
		},
		right: {
			type: "binary",
			operator: "*",
			right: {
				type: "num",
				value: "4"
			},
			left: {
				type: "num",
				value: "3"
			}
		},
		operator: "+"
	},
	func: {
		type: "var",
		value: "println"
	}
}
{type:var,value:fib}
T{type:op,value:=}
{type:kw,value:lambda}
{type:kw,value:if}
Error1
{type:var,value:n}
T{type:op,value:<}
{type:num,value:2}
{
	type: "binary",
	left: {
		type: "var",
		value: "n"
	},
	operator: "<",
	right: {
		type: "num",
		value: "2"
	}
}
{type:var,value:n}
{type:var,value:fib}
{type:var,value:n}
T{type:op,value:-}
{type:num,value:1}
T{type:op,value:+}
{type:var,value:fib}
{type:var,value:n}
T{type:op,value:-}
{type:num,value:2}
{
	type: "assign",
	operator: "=",
	right: {
		type: "lambda",
		body: {
			type: "if",
			cond: {
				type: "binary",
				left: {
					type: "var",
					value: "n"
				},
				operator: "<",
				right: {
					type: "num",
					value: "2"
				}
			},
			then: {
				type: "var",
				value: "n"
			},
			else: {
				type: "binary",
				right: {
					type: "call",
					func: {
						type: "var",
						value: "fib"
					},
					args: {
						type: "binary",
						operator: "-",
						right: {
							type: "num",
							value: "2"
						},
						left: {
							type: "var",
							value: "n"
						}
					}
				},
				operator: "+",
				left: {
					type: "call",
					func: {
						type: "var",
						value: "fib"
					},
					args: {
						type: "binary",
						left: {
							type: "var",
							value: "n"
						},
						operator: "-",
						right: {
							type: "num",
							value: "1"
						}
					}
				}
			}
		},
		vars: "n"
	},
	left: {
		type: "var",
		value: "fib"
	}
}
{type:var,value:println}
{type:var,value:fib}
{type:num,value:15}
{
	type: "call",
	args: {
		type: "call",
		args: {
			type: "num",
			value: "15"
		},
		func: {
			type: "var",
			value: "fib"
		}
	},
	func: {
		type: "var",
		value: "println"
	}
}
{type:var,value:printrange}
T{type:op,value:=}
{type:kw,value:lambda}
{type:kw,value:if}
Error1
{type:var,value:a}
T{type:op,value:<=}
{type:var,value:b}
{
	type: "binary",
	operator: "<=",
	right: {
		type: "var",
		value: "b"
	},
	left: {
		type: "var",
		value: "a"
	}
}
{type:var,value:print}
{type:var,value:a}
{type:var,value:temp}
T{type:op,value:=}
{type:var,value:a}
T{type:op,value:+}
{type:num,value:1}
{type:kw,value:if}
Error1
{type:var,value:temp}
T{type:op,value:<=}
{type:var,value:b}
{
	type: "binary",
	left: {
		type: "var",
		value: "temp"
	},
	right: {
		type: "var",
		value: "b"
	},
	operator: "<="
}
{type:var,value:print}
{type:str,value:, }
{type:var,value:print}
T{type:op,value:-}
{type:var,value:range}
{type:var,value:a}
T{type:op,value:+}
{type:num,value:1}
{type:var,value:b}
{type:punc,value:}}
